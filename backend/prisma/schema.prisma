generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  isActive     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  email        String    @unique @db.VarChar(256)
  fullname     String?   @db.VarChar(256)
  password     String?
  refreshToken String?
  role         Role      @default(USER)

  @@map("users")
}

model Member {
  id            String        @id @default(uuid())
  email         String?       @unique @db.VarChar(256)
  firstName     String?       @db.VarChar(56)
  lastName      String?       @db.VarChar(56)
  bio           String?
  credits       Float         @default(0)
  plan          Subscription? @default(NOPSubs)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @db.Timestamp(6)
  deletedAt     DateTime?     @db.Timestamp(6)
  isActive      Boolean       @default(false)
  functionality String?
  phone         Int?          @unique
  journals      Journal[]
  reservations  Reservation[]

  @@map("members")
}

model Price {
  id         String    @id @default(uuid())
  name       String
  price      Float
  timePeriod String
  type       PriceType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("prices")
}

model Journal {
  id            String      @id @default(uuid())
  isPayed       Boolean
  registredTime DateTime
  leaveTime     DateTime?
  payedAmount   Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt @db.Timestamp(6)
  memberID      String?
  journalType   JournalType @default(DEMI_JOURNEE)
  isReservation Boolean     @default(false)
  members       Member?     @relation(fields: [memberID], references: [id])

  @@map("journals")
}

model Reservation {
  id            String    @id @default(uuid())
  isPayed       Boolean
  registredTime DateTime
  leaveTime     DateTime?
  payedAmount   Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @db.Timestamp(6)
  memberID      String?
  member        Member?   @relation(fields: [memberID], references: [id])

  @@map("reservations")
}

enum PriceType {
  journal
  abonnement
}

enum Role {
  ADMIN
  USER
}

enum Subscription {
  NOPSubs
  Monthly
  Weekly
}

enum JournalType {
  DEMI_JOURNEE
  JOURNEE
}

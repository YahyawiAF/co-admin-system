generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String    @id @default(uuid())
    isActive     Boolean   @default(false)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt @db.Timestamp()
    deletedAt    DateTime?  @db.Timestamp()
    email        String    @unique @db.VarChar(256)
    fullname     String?   @db.VarChar(256)
    password     String?
    refreshToken String?
    role         Role      @default(value: USER)

    @@map("users")
}

model Member {
    id String @id @default(uuid())
    email         String? @unique @db.VarChar(256)
    phone         Int? @unique
    firstName     String? @db.VarChar(56)
    lastName      String? @db.VarChar(56)
    functionality String?
    bio           String?

    credits Float @default(value: 0)

    plan         Subscription? @default(value: NOPSubs)
    journals     Journal[]
    reservations Reservation[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @db.Timestamp()
    deletedAt DateTime? @db.Timestamp()
    isActive  Boolean   @default(false)

    @@map("members")
}

model Prices {
    id String @id @default(uuid())

    journalPrice       Float @default(value: 0)
    demiJournal        Float @default(value: 0)
    monthSubscription  Float @default(value: 0)
    weekSubscription   Float @default(value: 0)
    meetingRoomHourly  Float @default(value: 0)
    meetingRoomMonthly Float @default(value: 0)
}

model Journal {
    id String @id @default(uuid())

    isPayed       Boolean
    registredTime DateTime
    leaveTime     DateTime?
    payedAmount   Float
    isReservation Boolean @default(false)
    journalType   JournalType @default(value: DEMI_JOURNEE)
  
    memberID String?
    members   Member? @relation(fields: [memberID], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @db.Timestamp()

    @@map("journals")
}

model Reservation {
    id String @id @default(uuid())

    isPayed       Boolean
    registredTime DateTime
    leaveTime     DateTime?
    payedAmount   Float

    memberID String?
    member   Member? @relation(fields: [memberID], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @db.Timestamp()

    @@map("reservations")
}

enum Role {
    ADMIN
    USER
}

enum Subscription {
    NOPSubs
    Monthly
    Weekly
}

enum JournalType {
  DEMI_JOURNEE
  JOURNEE
}

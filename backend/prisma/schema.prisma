generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  isActive           Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @db.Timestamp(6)
  deletedAt          DateTime? @db.Timestamp(6)
  email              String?    @unique @db.VarChar(256)
  fullname           String?     @db.VarChar(256)
  password           String?
  refreshToken       String?
  role               Role      @default(USER)
  resetPasswordToken String?
  accessToken        String?
  phoneNumber        String?  @unique

  @@map("users")
}

model Member {
  id            String        @id @default(uuid())
  email         String?       @unique @db.VarChar(256)
  firstName     String?       @db.VarChar(56)
  lastName      String?       @db.VarChar(56)
  bio           String?
  credits       Float         @default(0)
  plan          Subscription? @default(Journal)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt @db.Timestamp(6)
  deletedAt     DateTime?     @db.Timestamp(6)
  isActive      Boolean       @default(false)
  functionality String?
  phone         Int?          @unique
  userId Int?
  abonnements   Abonnement[]
  journals      Journal[]
  reservations  Reservation[]

  @@map("members")
}

model Price {
  id          String       @id @default(uuid())
  name        String
  price       Float
  type        PriceType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  timePeriod  Json
  abonnements Abonnement[]
  journals    Journal[]

  @@map("prices")
}

model Journal {
  id            String    @id @default(uuid())
  isPayed       Boolean
  registredTime DateTime
  leaveTime     DateTime?
  payedAmount   Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @db.Timestamp(6)
  memberID      String?
  isReservation Boolean   @default(false)
  priceId       String?
  members       Member?   @relation(fields: [memberID], references: [id])
  prices        Price?    @relation(fields: [priceId], references: [id])

  @@map("journals")
}

model Abonnement {
  id            String    @id @default(uuid())
  isPayed       Boolean
  registredDate DateTime
  leaveDate     DateTime?
  stayedPeriode String?
  payedAmount   Float
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt @db.Timestamp(6)
  memberID      String
  isReservation Boolean   @default(false)
  priceId       String
  members       Member    @relation(fields: [memberID], references: [id])
  price         Price     @relation(fields: [priceId], references: [id])

  @@map("abonnements")
}

model Reservation {
  id            String    @id @default(uuid())
  isPayed       Boolean
  registredTime DateTime
  leaveTime     DateTime?
  payedAmount   Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @db.Timestamp(6)
  memberID      String?
  member        Member?   @relation(fields: [memberID], references: [id])

  @@map("reservations")
}

enum PriceType {
  journal
  abonnement
}

enum Role {
  ADMIN
  USER
}

enum Subscription {
  Journal
  Membership
}